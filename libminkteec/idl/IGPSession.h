// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

/**
 * @addtogroup IGPSession
 * @{
 */
/** @cond */
/** IGPSession_MemoryObjectParameters are additional info associated to a memory object. */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

typedef struct {
  uint64_t size;
  uint64_t offset;
  uint64_t sharedObjIndex;
} IGPSession_MemoryObjectParameters;

#define TEE_EX_PARAM_TYPE_NONE UINT32_C(0)

#define TEE_EX_PARAM_TYPE_MEMREF_NULL UINT32_C(1)

#define TEE_EX_PARAM_TYPE_MEMREF_DUP UINT32_C(2)

#define TEE_EX_PARAM_TYPE_MEMREF_FORCE_RW UINT32_C(3)

#define IGPSession_ERROR_CLOSED INT32_C(10)

#define IGPSession_OP_close 0
#define IGPSession_OP_invokeCommand 1

static inline int32_t
IGPSession_release(Object self)
{
    return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IGPSession_retain(Object self)
{
    return Object_invoke(self, Object_OP_retain, 0, 0);
}

/*
*
*  Close the session.
*
*  @return
*  Object_OK on success.
*
*/
static inline int32_t IGPSession_close(Object self)
{
    return Object_invoke(self, IGPSession_OP_close, 0, 0);;
}

/*
*
*  Invokes a command on an open GP Session.
*
*  The content of the 4 input and output buffers is manually marshalled by the
*  caller or implementer depending on the type of the parameter.
*
*  When a memory object is passed to represent a shared buffer, the corresponding
*  input buffer is expected to contain a struct IGPSession_MemoryObjectParameters
*  to detail the size and offset of the portion of the buffer being actually
*  shared with the TA.
*
*  The memrefOutSz[1-4] parameters carry the output size of the passed memory
*  objects, or, if a larger buffer was requested, the size of the larger buffer.
*
*  @param[in]  commandID                       Numeric code for the command.
*  @param[in]  cancelCode                      Optional code to use for cancellations.
*  @param[in]  cancellationRequestTimeout      Timeout for automatic request cancellation.
*  @param[in]  paramTypes                      Types of the 4 parameters, 1 byte per parameter.
*  @param[in]  exParamTypes                    Extended information for the 4 parameters, 1 byte per parameter.
*  @param[in]  i1                              First input buffer.
*  @param[in]  i2                              Second input buffer.
*  @param[in]  i3                              Third input buffer.
*  @param[in]  i4                              Fourth input buffer.
*  @param[out] o1                              First output buffer.
*  @param[out] o2                              Second output buffer.
*  @param[out] o3                              Third output buffer.
*  @param[out] o4                              Fourth output buffer.
*  @param[in]  imem1                           First optional memory object.
*  @param[in]  imem2                           Second optional memory object.
*  @param[in]  imem3                           Third optional memory object.
*  @param[in]  imem4                           Fourth optional memory object.
*  @param[out] memrefOutSz1                    Output size for memref 1.
*  @param[out] memrefOutSz2                    Output size for memref 2.
*  @param[out] memrefOutSz3                    Output size for memref 3.
*  @param[out] memrefOutSz4                    Output size for memref 4.
*  @param[out] retValue                        GP return value.
*  @param[out] retOrigin                       Where the GP return value originated.
*
*  @return
*  Object_OK if successful.
*
*/
static inline int32_t IGPSession_invokeCommand(Object self, uint32_t commandID_val, uint32_t cancelCode_val, uint32_t cancellationRequestTimeout_val, uint32_t paramTypes_val, uint32_t exParamTypes_val, const void *i1_ptr, size_t i1_len, const void *i2_ptr, size_t i2_len, const void *i3_ptr, size_t i3_len, const void *i4_ptr, size_t i4_len, void *o1_ptr, size_t o1_len, size_t *o1_lenout, void *o2_ptr, size_t o2_len, size_t *o2_lenout, void *o3_ptr, size_t o3_len, size_t *o3_lenout, void *o4_ptr, size_t o4_len, size_t *o4_lenout, Object imem1, Object imem2, Object imem3, Object imem4, uint32_t *memrefOutSz1_ptr, uint32_t *memrefOutSz2_ptr, uint32_t *memrefOutSz3_ptr, uint32_t *memrefOutSz4_ptr, uint32_t *retValue_ptr, uint32_t *retOrigin_ptr)
{
    struct bi {
        uint32_t m_commandID;
        uint32_t m_cancelCode;
        uint32_t m_cancellationRequestTimeout;
        uint32_t m_paramTypes;
        uint32_t m_exParamTypes;
    } i;
    i.m_commandID = commandID_val;
    i.m_cancelCode = cancelCode_val;
    i.m_cancellationRequestTimeout = cancellationRequestTimeout_val;
    i.m_paramTypes = paramTypes_val;
    i.m_exParamTypes = exParamTypes_val;
    struct bo {
        uint32_t m_memrefOutSz1;
        uint32_t m_memrefOutSz2;
        uint32_t m_memrefOutSz3;
        uint32_t m_memrefOutSz4;
        uint32_t m_retValue;
        uint32_t m_retOrigin;
    } o = {0,0,0,0,0,0};

    ObjectArg a[] = {
        {.b = (ObjectBuf) { &i, 20 } },
        {.bi = (ObjectBufIn) { i1_ptr, i1_len * sizeof(uint8_t) } },
        {.bi = (ObjectBufIn) { i2_ptr, i2_len * sizeof(uint8_t) } },
        {.bi = (ObjectBufIn) { i3_ptr, i3_len * sizeof(uint8_t) } },
        {.bi = (ObjectBufIn) { i4_ptr, i4_len * sizeof(uint8_t) } },
        {.b = (ObjectBuf) {  &o, 24 } },
        {.b = (ObjectBuf) { o1_ptr, o1_len * sizeof(uint8_t) } },
        {.b = (ObjectBuf) { o2_ptr, o2_len * sizeof(uint8_t) } },
        {.b = (ObjectBuf) { o3_ptr, o3_len * sizeof(uint8_t) } },
        {.b = (ObjectBuf) { o4_ptr, o4_len * sizeof(uint8_t) } },
        {.o = imem1 },
        {.o = imem2 },
        {.o = imem3 },
        {.o = imem4 },
    };

    int32_t result = Object_invoke(self, IGPSession_OP_invokeCommand, a, ObjectCounts_pack(5, 5, 4, 0));
    *memrefOutSz1_ptr = o.m_memrefOutSz1;
    *memrefOutSz2_ptr = o.m_memrefOutSz2;
    *memrefOutSz3_ptr = o.m_memrefOutSz3;
    *memrefOutSz4_ptr = o.m_memrefOutSz4;
    *retValue_ptr = o.m_retValue;
    *retOrigin_ptr = o.m_retOrigin;
    *o1_lenout = a[6].b.size / sizeof(uint8_t);
    *o2_lenout = a[7].b.size / sizeof(uint8_t);
    *o3_lenout = a[8].b.size / sizeof(uint8_t);
    *o4_lenout = a[9].b.size / sizeof(uint8_t);

    return result;
}
