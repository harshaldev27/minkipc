// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IWait_WAIT_INFINITE UINT32_C(0xFFFFFFFF)
#define IWait_EVENT_NONE UINT32_C(0)
#define IWait_EVENT_CANCEL UINT32_C(1)

#define IWait_OP_wait 0
#define IWait_OP_signal 1

static inline int32_t
IWait_release(Object self)
{
    return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IWait_retain(Object self)
{
    return Object_invoke(self, Object_OP_retain, 0, 0);
}

/*
*
*  @brief Wait for the specified amount of milliseconds for an event to occur.
*
*  The object will only respond to events passed in the events parameter,
*  to be interpreted as a mask, one event per bit.
*
*  @param[in]  msec   How long to wait, in milliseconds, or WAIT_INFINITE.
*  @param[in]  code   Optional code to use when processing an incoming signal:
*                     if non-0, the object will only accept a signal with
*                     matching code.
*  @param[in]  events See list of supported events above.
*  @param[out] result Mask of the received events.
*
*  @return  Object_OK on success.
*
*/
static inline int32_t IWait_wait(Object self, uint32_t msec_val, uint32_t code_val, uint32_t events_val, uint32_t *result_ptr)
{
    struct bi {
        uint32_t m_msec;
        uint32_t m_code;
        uint32_t m_events;
    } i;
    i.m_msec = msec_val;
    i.m_code = code_val;
    i.m_events = events_val;

    ObjectArg a[] = {
        {.b = (ObjectBuf) { &i, 12 } },
        {.b = (ObjectBuf) { result_ptr, sizeof(uint32_t) } },
    };

    int32_t result = Object_invoke(self, IWait_OP_wait, a, ObjectCounts_pack(1, 1, 0, 0));

    return result;
}

/*
*
*  @brief Signal the object with the specified event(s).
*
*  @param[in]  code   Optional code to use for signaling: if non-0, the object
*                     will only process a signal with matching code.
*  @param[in]  events See list of supported events above.
*
*  @return  Object_OK if the events were delivered.
*
*/
static inline int32_t IWait_signal(Object self, uint32_t code_val, uint32_t events_val)
{
    struct bi {
        uint32_t m_code;
        uint32_t m_events;
    } i;
    i.m_code = code_val;
    i.m_events = events_val;

    ObjectArg a[] = {
        {.b = (ObjectBuf) { &i, 8 } },
    };

    int32_t result = Object_invoke(self, IWait_OP_signal, a, ObjectCounts_pack(1, 0, 0, 0));

    return result;
}
