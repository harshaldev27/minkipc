// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

/** @cond */

#define IIO_ERROR_OFFSET_OUT_OF_BOUNDS INT32_C(10)
#define IIO_ERROR_SOURCE_BUFFER_TOO_LARGE INT32_C(11)
#define IIO_ERROR_INVALID_BUFFER_AND_OFFSET INT32_C(12)

#define IIO_OP_getLength 0
#define IIO_OP_readAtOffset 1
#define IIO_OP_writeAtOffset 2

static inline int32_t
IIO_release(Object self)
{
    return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IIO_retain(Object self)
{
    return Object_invoke(self, Object_OP_retain, 0, 0);
}

/**
 * @brief Retrieves maximum value for the combination of offset and buffer
 * length for readAtOffset() and writeAtOffset().
 *
 * @param len Maximum value for the combination of offset and
 *            buffer length passed to readAtOffset() and
 *            writeAtOffset().
 * @return Object_OK on success.
 *
 */
static inline int32_t IIO_getLength(Object self, uint64_t *len_ptr)
{
    ObjectArg a[] = {
        {.b = (ObjectBuf) { len_ptr, sizeof(uint64_t) } },
    };

    int32_t result = Object_invoke(self, IIO_OP_getLength, a, ObjectCounts_pack(0, 1, 0, 0));

    return result;
}

/**
 * @brief Copies from source at the given offset into the output buffer up
 * to the size of the output buffer.  If the output buffer is larger
 * than the source at the provided offset, the remaining bytes of
 * the output buffer remain unchanged.
 *
 * @param offset Offset to begin reading from source
 *               buffer.
 *  @param data   Destination to copy source data into.
 *  @return Object_OK on success.
 *
 */
static inline int32_t IIO_readAtOffset(Object self, uint64_t offset_val, void *data_ptr, size_t data_len, size_t *data_lenout)
{
    ObjectArg a[] = {
        {.b = (ObjectBuf) { &offset_val, sizeof(uint64_t) } },
        {.b = (ObjectBuf) { data_ptr, data_len * sizeof(uint8_t) } },
    };

    int32_t result = Object_invoke(self, IIO_OP_readAtOffset, a, ObjectCounts_pack(1, 1, 0, 0));
    *data_lenout = a[1].b.size / sizeof(uint8_t);

    return result;
}

/**
 * @brief Copies in to the destination at the given offset up to input buffer size.
 * If the combined input buffer length and offset are a greater length than
 * the destination, an error is returned and no data is copied.
 *
 * @param offset Offset to begin writing into the
 *               destination.
 * @param data Source of data to copy to destination.
 * @return Object_OK on success.
 *
 */
static inline int32_t IIO_writeAtOffset(Object self, uint64_t offset_val, const void *data_ptr, size_t data_len)
{
    ObjectArg a[] = {
        {.b = (ObjectBuf) { &offset_val, sizeof(uint64_t) } },
        {.bi = (ObjectBufIn) { data_ptr, data_len * sizeof(uint8_t) } },
    };

    int32_t result = Object_invoke(self, IIO_OP_writeAtOffset, a, ObjectCounts_pack(2, 0, 0, 0));

    return result;
}
