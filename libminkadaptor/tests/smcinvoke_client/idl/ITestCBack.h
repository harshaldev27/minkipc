// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define ITestCallable_ERROR_OBJECT_REMOTE INT32_C(10)
#define ITestCallable_ERROR INT32_C(11)

#define ITestCallable_OP_call 0
#define ITestCallable_OP_callWithBuffer 1
#define ITestCallable_OP_callWithBufferOut 2
#define ITestCallable_OP_callWithObject 3
#define ITestCallable_OP_callGetObject 4
#define ITestCallable_OP_callGetThreeObjects 5
#define ITestCallable_OP_callAddInt 6
#define ITestCallable_OP_returnError 7
#define ITestCallable_OP_callCopyBuffer 8
#define ITestCallable_OP_callFuncWithBuffer 9
#define ITestCallable_OP_callWithDelay 10
#define ITestCallable_OP_callGetMemObject 11
#define ITestCallable_OP_callGetMemObjectWithBufferIn 12
#define ITestCallable_OP_callGetMemObjectWithBufferOut 13
#define ITestCallable_OP_callGetMemObjectWithBufferInAndOut 14
#define ITestCallable_OP_callGetTwoMemObjects 15

static inline int32_t
ITestCallable_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITestCallable_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITestCallable_call(Object self)
{
  return Object_invoke(self, ITestCallable_OP_call, 0, 0);
}

static inline int32_t
ITestCallable_callWithBuffer(Object self, const void *arg_ptr, size_t arg_len)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };

  return Object_invoke(self, ITestCallable_OP_callWithBuffer, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
ITestCallable_callWithBufferOut(Object self, void *arg1_ptr, size_t arg1_len, size_t *arg1_lenout)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { arg1_ptr, arg1_len * 1 };

  int32_t result = Object_invoke(self, ITestCallable_OP_callWithBufferOut, a, ObjectCounts_pack(0, 1, 0, 0));

  *arg1_lenout = a[0].b.size / 1;

  return result;
}

static inline int32_t
ITestCallable_callWithObject(Object self, Object arg_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = arg_val;

  return Object_invoke(self, ITestCallable_OP_callWithObject, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCallable_callGetObject(Object self, Object *arg_ptr)
{
  ObjectArg a[1]={{{0,0}}};

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetObject, a, ObjectCounts_pack(0, 0, 0, 1));

  *arg_ptr = a[0].o;

  return result;
}

static inline int32_t
ITestCallable_callGetThreeObjects(Object self, Object *arg0_ptr, Object *arg1_ptr, Object *arg2_ptr)
{
  ObjectArg a[3]={{{0,0}}};

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetThreeObjects, a, ObjectCounts_pack(0, 0, 0, 3));

  *arg0_ptr = a[0].o;
  *arg1_ptr = a[1].o;
  *arg2_ptr = a[2].o;

  return result;
}

static inline int32_t
ITestCallable_callAddInt(Object self, uint32_t inVal1_val, uint32_t inVal2_val, uint32_t *outVal_ptr)
{
  ObjectArg a[2]={{{0,0}}};
  struct {
    uint32_t m_inVal1;
    uint32_t m_inVal2;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_inVal1 = inVal1_val;
  i.m_inVal2 = inVal2_val;
  a[1].b = (ObjectBuf) { outVal_ptr, sizeof(uint32_t) };

  return Object_invoke(self, ITestCallable_OP_callAddInt, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
ITestCallable_returnError(Object self)
{
  return Object_invoke(self, ITestCallable_OP_returnError, 0, 0);
}

static inline int32_t
ITestCallable_callCopyBuffer(Object self, const void *inBuf_ptr, size_t inBuf_len, void *outBuf_ptr, size_t outBuf_len, size_t *outBuf_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { inBuf_ptr, inBuf_len * 1 };
  a[1].b = (ObjectBuf) { outBuf_ptr, outBuf_len * 1 };

  int32_t result = Object_invoke(self, ITestCallable_OP_callCopyBuffer, a, ObjectCounts_pack(1, 1, 0, 0));

  *outBuf_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ITestCallable_callFuncWithBuffer(Object self, const void *arg_ptr, size_t arg_len)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };

  return Object_invoke(self, ITestCallable_OP_callFuncWithBuffer, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
ITestCallable_callWithDelay(Object self, int32_t *outVal_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { outVal_ptr, sizeof(int32_t) };

  return Object_invoke(self, ITestCallable_OP_callWithDelay, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
ITestCallable_callGetMemObject(Object self, Object *arg_ptr)
{
  ObjectArg a[1]={{{0,0}}};

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetMemObject, a, ObjectCounts_pack(0, 0, 0, 1));

  *arg_ptr = a[0].o;

  return result;
}

static inline int32_t
ITestCallable_callGetMemObjectWithBufferIn(Object self, Object *arg_ptr, const void *arg1_ptr, size_t arg1_len)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg1_ptr, arg1_len * 1 };

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetMemObjectWithBufferIn, a, ObjectCounts_pack(1, 0, 0, 1));

  *arg_ptr = a[1].o;

  return result;
}

static inline int32_t
ITestCallable_callGetMemObjectWithBufferOut(Object self, Object *arg_ptr, void *arg1_ptr, size_t arg1_len, size_t *arg1_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].b = (ObjectBuf) { arg1_ptr, arg1_len * 1 };

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetMemObjectWithBufferOut, a, ObjectCounts_pack(0, 1, 0, 1));

  *arg_ptr = a[1].o;
  *arg1_lenout = a[0].b.size / 1;

  return result;
}

static inline int32_t
ITestCallable_callGetMemObjectWithBufferInAndOut(Object self, Object *arg_ptr, const void *arg1_ptr, size_t arg1_len, void *arg2_ptr, size_t arg2_len, size_t *arg2_lenout)
{
  ObjectArg a[3]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg1_ptr, arg1_len * 1 };
  a[1].b = (ObjectBuf) { arg2_ptr, arg2_len * 1 };

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetMemObjectWithBufferInAndOut, a, ObjectCounts_pack(1, 1, 0, 1));

  *arg_ptr = a[2].o;
  *arg2_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ITestCallable_callGetTwoMemObjects(Object self, Object *arg_ptr, Object *arg1_ptr)
{
  ObjectArg a[2]={{{0,0}}};

  int32_t result = Object_invoke(self, ITestCallable_OP_callGetTwoMemObjects, a, ObjectCounts_pack(0, 0, 0, 2));

  *arg_ptr = a[0].o;
  *arg1_ptr = a[1].o;

  return result;
}


#define ITestCBack_ERROR_NULL_OBJ INT32_C(10)
#define ITestCBack_ERROR_BAD_OUTPUT INT32_C(11)
#define ITestCBack_ERROR INT32_C(12)

#define ITestCBack_OP_set 0
#define ITestCBack_OP_callSet 1
#define ITestCBack_OP_call 2
#define ITestCBack_OP_callWithBuffer 3
#define ITestCBack_OP_callWithBufferOut 4
#define ITestCBack_OP_callWithObject 5
#define ITestCBack_OP_callGetObject 6
#define ITestCBack_OP_callGetThreeObjects 7
#define ITestCBack_OP_callAddInt 8
#define ITestCBack_OP_callReturnError 9
#define ITestCBack_OP_callCopyBuffer 10
#define ITestCBack_OP_callFuncWithBuffer 11
#define ITestCBack_OP_callWithDelay 12
#define ITestCBack_OP_callGetMemObject 13
#define ITestCBack_OP_callGetMemObjectWithBufferIn 14
#define ITestCBack_OP_callGetMemObjectWithBufferOut 15
#define ITestCBack_OP_callGetMemObjectWithBufferInAndOut 16
#define ITestCBack_OP_callGetTwoMemObjects 17

static inline int32_t
ITestCBack_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITestCBack_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITestCBack_set(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_set, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callSet(Object self)
{
  return Object_invoke(self, ITestCBack_OP_callSet, 0, 0);
}

static inline int32_t
ITestCBack_call(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_call, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithBuffer(Object self, const void *arg_ptr, size_t arg_len, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callWithBuffer, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithBufferOut(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callWithBufferOut, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithObject(Object self, Object arg_val, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].o = arg_val;
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callWithObject, a, ObjectCounts_pack(0, 0, 2, 0));
}

static inline int32_t
ITestCBack_callGetObject(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetObject, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callGetThreeObjects(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetThreeObjects, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callAddInt(Object self, Object callee_val, uint32_t inVal1_val, uint32_t inVal2_val, uint32_t *outVal_ptr)
{
  ObjectArg a[3]={{{0,0}}};
  struct {
    uint32_t m_inVal1;
    uint32_t m_inVal2;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  a[2].o = callee_val;
  i.m_inVal1 = inVal1_val;
  i.m_inVal2 = inVal2_val;
  a[1].b = (ObjectBuf) { outVal_ptr, sizeof(uint32_t) };

  return Object_invoke(self, ITestCBack_OP_callAddInt, a, ObjectCounts_pack(1, 1, 1, 0));
}

static inline int32_t
ITestCBack_callReturnError(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callReturnError, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callCopyBuffer(Object self, const void *inBuf_ptr, size_t inBuf_len, void *outBuf_ptr, size_t outBuf_len, size_t *outBuf_lenout)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { inBuf_ptr, inBuf_len * 1 };
  a[1].b = (ObjectBuf) { outBuf_ptr, outBuf_len * 1 };

  int32_t result = Object_invoke(self, ITestCBack_OP_callCopyBuffer, a, ObjectCounts_pack(1, 1, 0, 0));

  *outBuf_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ITestCBack_callFuncWithBuffer(Object self, const void *arg_ptr, size_t arg_len, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callFuncWithBuffer, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithDelay(Object self, Object callee_val, int32_t *outVal_ptr)
{
  ObjectArg a[2]={{{0,0}}};
  a[1].o = callee_val;
  a[0].b = (ObjectBuf) { outVal_ptr, sizeof(int32_t) };

  return Object_invoke(self, ITestCBack_OP_callWithDelay, a, ObjectCounts_pack(0, 1, 1, 0));
}

static inline int32_t
ITestCBack_callGetMemObject(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetMemObject, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callGetMemObjectWithBufferIn(Object self, const void *arg_ptr, size_t arg_len, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetMemObjectWithBufferIn, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITestCBack_callGetMemObjectWithBufferOut(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetMemObjectWithBufferOut, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callGetMemObjectWithBufferInAndOut(Object self, const void *arg_ptr, size_t arg_len, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetMemObjectWithBufferInAndOut, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITestCBack_callGetTwoMemObjects(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callGetTwoMemObjects, a, ObjectCounts_pack(0, 0, 1, 0));
}



