// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

// Basic test interface for callback objects
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define ITestCallable_ERROR_OBJECT_REMOTE INT32_C(10)
#define ITestCallable_ERROR INT32_C(11)

#define ITestCallable_OP_call 0
#define ITestCallable_OP_callWithBuffer 1
#define ITestCallable_OP_callWithObject 3

static inline int32_t
ITestCallable_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITestCallable_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITestCallable_call(Object self)
{
  return Object_invoke(self, ITestCallable_OP_call, 0, 0);
}

static inline int32_t
ITestCallable_callWithBuffer(Object self, const void *arg_ptr, size_t arg_len)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };

  return Object_invoke(self, ITestCallable_OP_callWithBuffer, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
ITestCallable_callWithObject(Object self, Object arg_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = arg_val;

  return Object_invoke(self, ITestCallable_OP_callWithObject, a, ObjectCounts_pack(0, 0, 1, 0));
}

#define ITestCBack_ERROR_NULL_OBJ INT32_C(10)
#define ITestCBack_ERROR_BAD_OUTPUT INT32_C(11)
#define ITestCBack_ERROR INT32_C(12)

#define ITestCBack_OP_set 0
#define ITestCBack_OP_callSet 1
#define ITestCBack_OP_call 2
#define ITestCBack_OP_callWithBuffer 3
#define ITestCBack_OP_callWithObject 5

static inline int32_t
ITestCBack_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ITestCBack_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ITestCBack_set(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_set, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callSet(Object self)
{
  return Object_invoke(self, ITestCBack_OP_callSet, 0, 0);
}

static inline int32_t
ITestCBack_call(Object self, Object callee_val)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_call, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithBuffer(Object self, const void *arg_ptr, size_t arg_len, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { arg_ptr, arg_len * 1 };
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callWithBuffer, a, ObjectCounts_pack(1, 0, 1, 0));
}

static inline int32_t
ITestCBack_callWithObject(Object self, Object arg_val, Object callee_val)
{
  ObjectArg a[2]={{{0,0}}};
  a[0].o = arg_val;
  a[1].o = callee_val;

  return Object_invoke(self, ITestCBack_OP_callWithObject, a, ObjectCounts_pack(0, 0, 2, 0));
}
