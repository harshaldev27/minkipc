// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

// Basic test interface for callback objects
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITestCBack.h"

#define ITestCallable_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITestCallable_OP_call: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##call(me); \
      } \
      case ITestCallable_OP_callWithBuffer: { \
        if (k != ObjectCounts_pack(1, 0, 0, 0)) { \
          break; \
        } \
        const void *arg_ptr = (const void*) a[0].b.ptr; \
        size_t arg_len = a[0].b.size / 1; \
        return prefix##callWithBuffer(me, arg_ptr, arg_len); \
      } \
      case ITestCallable_OP_callWithObject: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##callWithObject(me, a[0].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#define ITestCBack_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##retain(me); \
      } \
      case ITestCBack_OP_set: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##set(me, a[0].o); \
      } \
      case ITestCBack_OP_callSet: { \
        if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
          break; \
        } \
        return prefix##callSet(me); \
      } \
      case ITestCBack_OP_call: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##call(me, a[0].o); \
      } \
      case ITestCBack_OP_callWithBuffer: { \
        if (k != ObjectCounts_pack(1, 0, 1, 0)) { \
          break; \
        } \
        const void *arg_ptr = (const void*) a[0].b.ptr; \
        size_t arg_len = a[0].b.size / 1; \
        return prefix##callWithBuffer(me, arg_ptr, arg_len, a[1].o); \
      } \
      case ITestCBack_OP_callWithObject: { \
        if (k != ObjectCounts_pack(0, 0, 2, 0)) { \
          break; \
        } \
        return prefix##callWithObject(me, a[0].o, a[1].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

