// Copyright (c) 2025, Qualcomm Innovation Center, Inc. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause

#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "IIO.h"

#ifdef __clang__
#define __compiler_pragma_pre \
    _Pragma("clang diagnostic push") \
    _Pragma("clang diagnostic ignored \"-Wignored-attributes\"")
#define __compiler_pragma_post _Pragma("clang diagnostic pop")
#else
#define __compiler_pragma_pre
#define __compiler_pragma_post
#endif

#define IIO_DEFINE_INVOKE(func, prefix, type) \
    int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
    { \
        __compiler_pragma_pre \
         \
        __compiler_pragma_post \
        type me = (type) h; \
        switch (ObjectOp_methodID(op)) { \
            case Object_OP_release: { \
                if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
                    break; \
                } \
                return prefix##release(me); \
            } \
            case Object_OP_retain: { \
                if (k != ObjectCounts_pack(0, 0, 0, 0)) { \
                    break; \
                } \
                return prefix##retain(me); \
            } \
             \
            case IIO_OP_getLength: { \
                if (k != ObjectCounts_pack(0,1,0,0) || \
                    a[0].b.size != 8) { \
                    break; \
                } \
                 \
                uint64_t *len_ptr = (uint64_t*)a[0].b.ptr; \
                int32_t r = prefix##getLength(me, len_ptr); \
                 \
                return r; \
            }  \
            case IIO_OP_readAtOffset: { \
                if (k != ObjectCounts_pack(1,1,0,0) || \
                    a[0].b.size != 8) { \
                    break; \
                } \
                 \
                const uint64_t *offset_ptr = (const uint64_t*)a[0].b.ptr; \
                void *data_ptr = (void*)a[1].b.ptr; \
                size_t data_len = a[1].b.size; \
                int32_t r = prefix##readAtOffset(me, *offset_ptr, data_ptr, data_len, &data_len); \
                 \
                a[1].b.size = data_len; \
                return r; \
            }  \
            case IIO_OP_writeAtOffset: { \
                if (k != ObjectCounts_pack(2,0,0,0) || \
                    a[0].b.size != 8) { \
                    break; \
                } \
                 \
                const uint64_t *offset_ptr = (const uint64_t*)a[0].b.ptr; \
                const void *data_ptr = (const void*)a[1].b.ptr; \
                size_t data_len = a[1].b.size; \
                int32_t r = prefix##writeAtOffset(me, *offset_ptr, data_ptr, data_len); \
                 \
                return r; \
            }  \
        } \
        return Object_ERROR_INVALID; \
    }
